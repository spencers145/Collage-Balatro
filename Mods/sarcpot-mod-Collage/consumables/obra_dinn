SMODS.Consumable({
    key = 'obra_dinn',
    set = 'travel',
    atlas = 'consumables',
    pos = {
        x = 0,
        y = 4
    },
    discovered = false,
    config = {
        max_highlighted = 3
    },
    loc_vars = function(self, info_queue)
        return {
            vars = {self.config.max_highlighted}
        }
    end,
    cost = 3,
    calculate = function(self, card, context)
    end,
    can_use = function(self, card)
          return #G.hand.highlighted > 1 and #G.hand.highlighted <= self.config.max_highlighted
    end,
    use = function(self, card, area, copier)
        local leftmost = G.hand.highlighted[1]
        for i=1, #G.hand.highlighted do if G.hand.highlighted[i].T.x < leftmost.T.x then leftmost = G.hand.highlighted[i] end end
        local selected_rank = leftmost.base.value
        G.E_MANAGER:add_event(Event({
            trigger = 'after',
            delay = 0.5,
            func = function()
                return true
            end
        }))
        for i = 1, #G.hand.highlighted do
            if not G.hand.highlighted[i] ~= leftmost then
            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.2,
                func = function()
                    play_sound('tarot1', (math.random(8, 12) / 10))
                    G.hand.highlighted[i]:juice_up()
                    SMODS.change_base(G.hand.highlighted[i], nil, selected_rank)
                    return true
                end
            }))
        end
        end
        G.E_MANAGER:add_event(Event({
            trigger = 'after',
            delay = 0.4,
            func = function()
                SMODS.destroy_cards(leftmost)
                return true
            end
        }))
    end
})
