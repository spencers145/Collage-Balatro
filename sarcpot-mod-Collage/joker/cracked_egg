SMODS.Joker {


    key = 'cracked_egg',

    config = { extra = { current_rarity = 0, boss_blinds = 0 } },
    loc_vars = function(self, info_queue, card)
        local rarity = ''
        if card.ability.extra.current_rarity == 0 then
            rarity = localize('sarc_common')
        elseif card.ability.extra.current_rarity == 1 then
            rarity = localize('sarc_uncommon')
        else 
            rarity = localize('sarc_rare')
        end
        return { vars = {rarity, card.ability.extra.boss_blinds} }
    end,
    rarity = 1,
    atlas = 'sarcpot_atlas',
    pos = { x = 0, y = 1 },
    cost = 2,
    eternal_compat = false,
    pools = {
        Food = true
      },
    discovered = false,
    calculate = function(self, card, context)
        --Selects joker to the right
        local other_joker

        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == card then other_joker = G.jokers.cards[i + 1] or nil end
        end


        --juices if it is at its max rarity
      
       

        if context.end_of_round and G.GAME.blind.boss and not context.blueprint and not context.individual and not context.repetition then
            if card.ability.extra.boss_blinds < 2 then
                card.ability.extra.boss_blinds = card.ability.extra.boss_blinds + 1
            end
            if card.ability.extra.boss_blinds == 1 then
                card.ability.extra.current_rarity = 1
            elseif card.ability.extra.boss_blinds >= 2 then
                card.ability.extra.current_rarity = 2
                
                    local eval = function(card) return not card.REMOVED end
                    juice_card_until(card, eval, true)
            
            end   

        end

        if context.selling_self and other_joker ~= nil then
            G.E_MANAGER:add_event(Event({

                trigger = 'after',
                delay = 0.4,
                func = function()
                    local edition = other_joker.edition and other_joker.edition.key or nil
                    local stickers = {}
                    for k, v in pairs(SMODS.Stickers) do
                        if other_joker.ability[k] then
                            table.insert(stickers, k)
                        end
                    end
                    local rarity = ''
                    if card.ability.extra.current_rarity == 0 then
                        rarity = "Common"
                    elseif card.ability.extra.current_rarity == 1 then
                        rarity = "Uncommon"
                    else
                        rarity = "Rare"
                    end
                    other_joker:start_dissolve()
                    local new_joker = SMODS.create_card({
                        area = G.jokers,
                        set = 'Joker',
                        rarity = rarity,
                        edition =
                            edition,
                        stickers = stickers
                    })
                    new_joker:add_to_deck()
                    G.jokers:emplace(new_joker)
                    new_joker:start_materialize()
                    return true
                end
            }))
        end
    end



}
