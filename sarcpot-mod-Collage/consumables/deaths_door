SMODS.Consumable({
    key = 'deaths_door',
    set = 'travel',
    atlas = 'consumables',
    pos = {
        x = 0,
        y = 2
    },
    discovered = false,
    config = {
        max_highlighted = 4
    },
    loc_vars = function(self, info_queue)
        return {
            vars = {self.config.max_highlighted}
        }
    end,
    cost = 3,
    calculate = function(self, card, context)
    end,
    can_use = function(self, card)
        return #G.hand.highlighted > 1 and #G.hand.highlighted <= self.config.max_highlighted
    end,
    use = function(self, card, area, copier)

        local leftmost = G.hand.highlighted[1]
        for i=1, #G.hand.highlighted do if G.hand.highlighted[i].T.x < leftmost.T.x then leftmost = G.hand.highlighted[i] end end
        local selected_suit = leftmost.base.suit
        G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.5,
                func = function()
                    return true
                end
            }))
        
        for i = 1, #G.hand.highlighted do
            if not G.hand.highlighted[i] ~= leftmost then
                 G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.2,
                func = function()
                    play_sound('tarot1',(math.random(8,12)/10))
                    G.hand.highlighted[i]:juice_up()
                    SMODS.change_base(G.hand.highlighted[i], selected_suit,nil)
                    return true
                end
            }))
            end
        end
        G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.4,
                func = function()
                       SMODS.destroy_cards(leftmost)
                    return true
                end
            }))

        --[[for i = 1, #G.hand.highlighted do
            local random_index = math.random(1, #filtered_playing_cards)
            local random_card = filtered_playing_cards[random_index]

            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.1,
                func = function()
                    if G.hand.highlighted[i] ~= leftmost then
                        copy_card(random_card, G.hand.highlighted[i])
                    end
                    return true
                end
            }))
            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.2,
                func = function()
                    G.hand.highlighted[i]:flip();
                    G.hand.highlighted[i]:juice_up(0.3, 0.3);

                    return true
                end
            }))
        end]] --
    end

})